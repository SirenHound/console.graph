// Generated by CoffeeScript 1.3.3
(function() {
  var BarGraph, Graph, Renderer, graph, intv, j, last,
    __slice = [].slice,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Renderer = (function() {

    function Renderer() {}

    return Renderer;

  })();

  Graph = (function() {

    function Graph() {
      this.points = [];
    }

    Graph.prototype.add = function() {
      var vals;
      vals = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return this.points.push.apply(this.points, vals);
    };

    Graph.prototype.render = function() {};

    return Graph;

  })();

  BarGraph = (function(_super) {

    __extends(BarGraph, _super);

    function BarGraph(options) {
      var _base, _base1, _base2, _ref, _ref1, _ref2;
      this.options = options != null ? options : {};
      BarGraph.__super__.constructor.apply(this, arguments);
      if ((_ref = (_base = this.options).resolution) == null) {
        _base.resolution = 1;
      }
      if ((_ref1 = (_base1 = this.options).height) == null) {
        _base1.height = 200;
      }
      if ((_ref2 = (_base2 = this.options).extraStyles) == null) {
        _base2.extraStyles = '';
      }
    }

    BarGraph.prototype._inspectorHeight = function() {
      return window.outerHeight - window.innerHeight - 180;
    };

    BarGraph.prototype.render = function() {
      var i, inspectorHeight, inspectorWidth, point, pointMax, spaces, steps, styles, xScaling, yScaling, _i, _ref;
      inspectorHeight = this._inspectorHeight();
      inspectorWidth = window.innerWidth;
      console.log("%c ", "font-size: " + inspectorHeight + "px");
      console.log("%c ", "padding-bottom: " + this.options.height + "px");
      steps = inspectorWidth / this.options.resolution;
      xScaling = Math.min(steps / this.points.length, 1);
      pointMax = Math.max.apply(Math, this.points);
      yScaling = pointMax / this.options.height;
      console.log(pointMax, this.options.height, yScaling);
      spaces = "";
      styles = [];
      for (i = _i = 0, _ref = Math.min(steps, this.points.length); 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        point = this.points[Math.floor(i / xScaling)];
        spaces += "%c ";
        styles.push("font-size: " + this.options.resolution + "px; background-color: blue; padding-bottom: " + (point / yScaling) + "px; " + this.options.extraStyles);
      }
      return console.log.apply(console, [spaces].concat(__slice.call(styles)));
    };

    return BarGraph;

  })(Graph);

  graph = new BarGraph({
    extraStyles: 'text-shadow: 1px 1px 1px grey; border: 1px solid #CCC'
  });

  last = 500;

  j = 0;

  intv = setInterval(function() {
    j++;
    last = Math.min(1000, Math.max(0, Math.floor(last + (Math.random() * 300 - 150))));
    graph.add(last);
    graph.render();
    if (j >= 2000) {
      return clearInterval(intv);
    }
  }, 100);

}).call(this);
